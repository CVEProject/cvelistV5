{
    "dataType": "CVE_RECORD",
    "dataVersion": "5.1",
    "cveMetadata": {
        "cveId": "CVE-2025-62496",
        "assignerOrgId": "14ed7db2-1595-443d-9d34-6215bf890778",
        "state": "PUBLISHED",
        "assignerShortName": "Google",
        "dateReserved": "2025-10-15T08:47:41.878Z",
        "datePublished": "2025-10-16T15:52:05.654Z",
        "dateUpdated": "2025-10-16T15:52:05.654Z"
    },
    "containers": {
        "cna": {
            "affected": [
                {
                    "collectionURL": "https://bellard.org/quickjs/",
                    "defaultStatus": "unaffected",
                    "packageName": "js_bigint_from_string",
                    "product": "QuickJS",
                    "vendor": "QuickJS",
                    "versions": [
                        {
                            "lessThan": "2025-09-13",
                            "status": "affected",
                            "version": "2025-04-26",
                            "versionType": "date"
                        }
                    ]
                }
            ],
            "credits": [
                {
                    "lang": "en",
                    "type": "finder",
                    "value": "Google Big Sleep"
                }
            ],
            "datePublic": "2025-07-24T22:00:00.000Z",
            "descriptions": [
                {
                    "lang": "en",
                    "supportingMedia": [
                        {
                            "base64": false,
                            "type": "text/html",
                            "value": "<p>A vulnerability exists in the QuickJS engine's BigInt string parsing logic (<code>js_bigint_from_string</code>) when attempting to create a BigInt from a string with an <b>excessively large number of digits</b>.</p><p>The function calculates the necessary number of bits (<code>n_bits</code>) required to store the BigInt using the formula:</p><div>$$\\text{n\\_bits} = (\\text{n\\_digits} \\times 27 + 7) / 8 \\quad (\\text{for radix 10})$$</div><ol><li><p>For large input strings (e.g., $79,536,432$ digits or more for base 10), the intermediate calculation $(\\text{n\\_digits} \\times 27 + 7)$ exceeds the maximum value of a standard signed 32-bit integer, resulting in an <b>Integer Overflow</b>.</p></li><li><p>The resulting <code>n_bits</code> value becomes unexpectedly small or even <b>negative</b> due to this wrap-around.</p></li><li><p>This flawed <code>n_bits</code> is then used to compute <code>n_limbs</code>, the number of memory \"limbs\" needed for the BigInt object. Since <code>n_bits</code> is too small, the calculated <code>n_limbs</code> is also <b>significantly underestimated</b>.</p></li><li><p>The function proceeds to allocate a <b><code>JSBigInt</code></b> object using this underestimated <code>n_limbs</code>.</p></li><li><p>When the function later attempts to write the actual BigInt data into the allocated object, the small buffer size is quickly exceeded, leading to a <b>Heap Out-of-Bounds Write</b> as data is written past the end of the allocated <code>r-&gt;tab</code> array.</p></li></ol><br>"
                        }
                    ],
                    "value": "A vulnerability exists in the QuickJS engine's BigInt string parsing logic (js_bigint_from_string) when attempting to create a BigInt from a string with an excessively large number of digits.\n\nThe function calculates the necessary number of bits (n_bits) required to store the BigInt using the formula:\n\n$$\\text{n\\_bits} = (\\text{n\\_digits} \\times 27 + 7) / 8 \\quad (\\text{for radix 10})$$\n\n  *  For large input strings (e.g., $79,536,432$ digits or more for base 10), the intermediate calculation $(\\text{n\\_digits} \\times 27 + 7)$ exceeds the maximum value of a standard signed 32-bit integer, resulting in an Integer Overflow.\n\n\n  *  The resulting n_bits value becomes unexpectedly small or even negative due to this wrap-around.\n\n\n  *  This flawed n_bits is then used to compute n_limbs, the number of memory \"limbs\" needed for the BigInt object. Since n_bits is too small, the calculated n_limbs is also significantly underestimated.\n\n\n  *  The function proceeds to allocate a JSBigInt object using this underestimated n_limbs.\n\n\n  *  When the function later attempts to write the actual BigInt data into the allocated object, the small buffer size is quickly exceeded, leading to a Heap Out-of-Bounds Write as data is written past the end of the allocated r->tab array."
                }
            ],
            "impacts": [
                {
                    "capecId": "CAPEC-175",
                    "descriptions": [
                        {
                            "lang": "en",
                            "value": "CAPEC-175 Code Inclusion"
                        }
                    ]
                }
            ],
            "metrics": [
                {
                    "cvssV4_0": {
                        "Automatable": "NOT_DEFINED",
                        "Recovery": "NOT_DEFINED",
                        "Safety": "NOT_DEFINED",
                        "attackComplexity": "HIGH",
                        "attackRequirements": "PRESENT",
                        "attackVector": "ADJACENT",
                        "baseScore": 7.1,
                        "baseSeverity": "HIGH",
                        "privilegesRequired": "LOW",
                        "providerUrgency": "NOT_DEFINED",
                        "subAvailabilityImpact": "LOW",
                        "subConfidentialityImpact": "HIGH",
                        "subIntegrityImpact": "HIGH",
                        "userInteraction": "PASSIVE",
                        "valueDensity": "NOT_DEFINED",
                        "vectorString": "CVSS:4.0/AV:A/AC:H/AT:P/PR:L/UI:P/VC:H/VI:H/VA:L/SC:H/SI:H/SA:L",
                        "version": "4.0",
                        "vulnAvailabilityImpact": "LOW",
                        "vulnConfidentialityImpact": "HIGH",
                        "vulnIntegrityImpact": "HIGH",
                        "vulnerabilityResponseEffort": "NOT_DEFINED"
                    },
                    "format": "CVSS",
                    "scenarios": [
                        {
                            "lang": "en",
                            "value": "GENERAL"
                        }
                    ]
                }
            ],
            "problemTypes": [
                {
                    "descriptions": [
                        {
                            "cweId": "CWE-190",
                            "description": "CWE-190 Integer Overflow or Wraparound",
                            "lang": "en",
                            "type": "CWE"
                        }
                    ]
                }
            ],
            "providerMetadata": {
                "orgId": "14ed7db2-1595-443d-9d34-6215bf890778",
                "shortName": "Google",
                "dateUpdated": "2025-10-16T15:52:05.654Z"
            },
            "references": [
                {
                    "url": "https://bellard.org/quickjs/Changelog"
                },
                {
                    "url": "https://issuetracker.google.com/434193016"
                }
            ],
            "source": {
                "discovery": "UNKNOWN"
            },
            "title": "Integer overflow in js_bigint_from_string in QuickJS",
            "x_generator": {
                "engine": "Vulnogram 0.2.0"
            }
        }
    }
}