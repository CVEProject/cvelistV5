{
    "dataType": "CVE_RECORD",
    "dataVersion": "5.1",
    "cveMetadata": {
        "cveId": "CVE-2025-62493",
        "assignerOrgId": "14ed7db2-1595-443d-9d34-6215bf890778",
        "state": "PUBLISHED",
        "assignerShortName": "Google",
        "dateReserved": "2025-10-15T08:47:41.878Z",
        "datePublished": "2025-10-16T15:51:42.952Z",
        "dateUpdated": "2025-10-16T17:59:10.306Z"
    },
    "containers": {
        "cna": {
            "affected": [
                {
                    "collectionURL": "https://bellard.org/quickjs/",
                    "defaultStatus": "unaffected",
                    "packageName": "js_bigint_to_string1",
                    "product": "QuickJS",
                    "vendor": "QuickJS",
                    "versions": [
                        {
                            "lessThan": "2025-09-13",
                            "status": "affected",
                            "version": "2025-04-26",
                            "versionType": "date"
                        }
                    ]
                }
            ],
            "credits": [
                {
                    "lang": "en",
                    "type": "finder",
                    "value": "Google Big Sleep"
                }
            ],
            "datePublic": "2025-07-24T22:00:00.000Z",
            "descriptions": [
                {
                    "lang": "en",
                    "supportingMedia": [
                        {
                            "base64": false,
                            "type": "text/html",
                            "value": "<p>A vulnerability exists in the QuickJS engine's BigInt string conversion logic (<code>js_bigint_to_string1</code>) due to an incorrect calculation of the required number of digits, which in turn leads to reading memory past the allocated BigInt structure.</p><ol><li><p>The function determines the number of characters (<code>n_digits</code>) needed for the string representation by calculating:</p><div>$$ \\\\ \\text{n\\_digits} = (\\text{n\\_bits} + \\text{log2\\_radix} - 1) / \\text{log2\\_radix}$$</div><p>$$$$This formula is <b>off-by-one</b> in certain edge cases when calculating the necessary memory limbs. For instance, a 127-bit BigInt using radix 32 (where $\\text{log2\\_radix}=5$) is calculated to need $\\text{n\\_digits}=26$.</p></li><li><p>The maximum number of bits actually stored is $\\text{n\\_bits}=127$, which requires only two 64-bit limbs ($\\text{JS\\_LIMB\\_BITS}=64$).</p></li><li><p>The conversion loop iterates <b>$\\text{n\\_digits}=26$ times</b>, attempting to read 5 bits in each iteration, totaling $26 \\times 5 = 130$ bits.</p></li><li><p>In the final iterations of the loop, the code attempts to read data that spans two limbs:</p><div><div>C<div></div></div><div><div><pre><code>c = (r-&gt;tab[pos] &gt;&gt; shift) | (r-&gt;tab[pos + 1] &lt;&lt; (JS_LIMB_BITS - shift));\n</code></pre></div></div></div></li><li><p>Since the BigInt was only allocated two limbs, the read operation for <code>r-&gt;tab[pos + 1]</code> becomes an <b>Out-of-Bounds Read</b> when <code>pos</code> points to the last valid limb (e.g., $pos=1$).</p></li></ol><p>This vulnerability allows an attacker to cause the engine to read and process data from the memory immediately following the BigInt buffer. This can lead to <b>Information Disclosure</b> of sensitive data stored on the heap adjacent to the BigInt object.</p><br>"
                        }
                    ],
                    "value": "A vulnerability exists in the QuickJS engine's BigInt string conversion logic (js_bigint_to_string1) due to an incorrect calculation of the required number of digits, which in turn leads to reading memory past the allocated BigInt structure.\n\n  *  The function determines the number of characters (n_digits) needed for the string representation by calculating:\n\n$$ \\\\ \\text{n\\_digits} = (\\text{n\\_bits} + \\text{log2\\_radix} - 1) / \\text{log2\\_radix}$$\n\n$$$$This formula is off-by-one in certain edge cases when calculating the necessary memory limbs. For instance, a 127-bit BigInt using radix 32 (where $\\text{log2\\_radix}=5$) is calculated to need $\\text{n\\_digits}=26$.\n\n\n  *  The maximum number of bits actually stored is $\\text{n\\_bits}=127$, which requires only two 64-bit limbs ($\\text{JS\\_LIMB\\_BITS}=64$).\n\n\n  *  The conversion loop iterates $\\text{n\\_digits}=26$ times, attempting to read 5 bits in each iteration, totaling $26 \\times 5 = 130$ bits.\n\n\n  *  In the final iterations of the loop, the code attempts to read data that spans two limbs:\n\nC\n\n\n\nc = (r->tab[pos] >> shift) | (r->tab[pos + 1] << (JS_LIMB_BITS - shift));\n\n\n\n\n\n\n\n\n\n  *  Since the BigInt was only allocated two limbs, the read operation for r->tab[pos + 1] becomes an Out-of-Bounds Read when pos points to the last valid limb (e.g., $pos=1$).\n\n\nThis vulnerability allows an attacker to cause the engine to read and process data from the memory immediately following the BigInt buffer. This can lead to Information Disclosure of sensitive data stored on the heap adjacent to the BigInt object."
                }
            ],
            "impacts": [
                {
                    "capecId": "CAPEC-175",
                    "descriptions": [
                        {
                            "lang": "en",
                            "value": "CAPEC-175 Code Inclusion"
                        }
                    ]
                }
            ],
            "metrics": [
                {
                    "cvssV4_0": {
                        "Automatable": "NOT_DEFINED",
                        "Recovery": "NOT_DEFINED",
                        "Safety": "NOT_DEFINED",
                        "attackComplexity": "HIGH",
                        "attackRequirements": "PRESENT",
                        "attackVector": "ADJACENT",
                        "baseScore": 5.9,
                        "baseSeverity": "MEDIUM",
                        "privilegesRequired": "LOW",
                        "providerUrgency": "NOT_DEFINED",
                        "subAvailabilityImpact": "LOW",
                        "subConfidentialityImpact": "HIGH",
                        "subIntegrityImpact": "LOW",
                        "userInteraction": "PASSIVE",
                        "valueDensity": "NOT_DEFINED",
                        "vectorString": "CVSS:4.0/AV:A/AC:H/AT:P/PR:L/UI:P/VC:H/VI:L/VA:L/SC:H/SI:L/SA:L",
                        "version": "4.0",
                        "vulnAvailabilityImpact": "LOW",
                        "vulnConfidentialityImpact": "HIGH",
                        "vulnIntegrityImpact": "LOW",
                        "vulnerabilityResponseEffort": "NOT_DEFINED"
                    },
                    "format": "CVSS",
                    "scenarios": [
                        {
                            "lang": "en",
                            "value": "GENERAL"
                        }
                    ]
                }
            ],
            "problemTypes": [
                {
                    "descriptions": [
                        {
                            "cweId": "CWE-125",
                            "description": "CWE-125 Out-of-bounds Read",
                            "lang": "en",
                            "type": "CWE"
                        }
                    ]
                }
            ],
            "providerMetadata": {
                "orgId": "14ed7db2-1595-443d-9d34-6215bf890778",
                "shortName": "Google",
                "dateUpdated": "2025-10-16T15:51:42.952Z"
            },
            "references": [
                {
                    "url": "https://bellard.org/quickjs/Changelog"
                },
                {
                    "url": "https://issuetracker.google.com/434193024"
                }
            ],
            "source": {
                "discovery": "UNKNOWN"
            },
            "title": "Heap out-of-bounds read in js_bigint_to_string1 in QuickJS",
            "x_generator": {
                "engine": "Vulnogram 0.2.0"
            }
        },
        "adp": [
            {
                "metrics": [
                    {
                        "other": {
                            "type": "ssvc",
                            "content": {
                                "timestamp": "2025-10-16T17:56:52.934146Z",
                                "id": "CVE-2025-62493",
                                "options": [
                                    {
                                        "Exploitation": "poc"
                                    },
                                    {
                                        "Automatable": "no"
                                    },
                                    {
                                        "Technical Impact": "partial"
                                    }
                                ],
                                "role": "CISA Coordinator",
                                "version": "2.0.3"
                            }
                        }
                    }
                ],
                "title": "CISA ADP Vulnrichment",
                "providerMetadata": {
                    "orgId": "134c704f-9b21-4f2e-91b3-4a467353bcc0",
                    "shortName": "CISA-ADP",
                    "dateUpdated": "2025-10-16T17:59:10.306Z"
                }
            }
        ]
    }
}